from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from create_bot import bot
from data_base.dao import add_note, get_all_categories, get_category_by_id
from keyboards.note_kb import main_note_kb, add_note_check, generate_category_keyboard, main_category_kb
from keyboards.other_kb import stop_fsm
from utils_bot.utils import get_content_info, send_message_user


add_note_router = Router()

class AddNoteStates(StatesGroup):
    content = State() 
    check_state = State() 

    
@add_note_router.message(F.text == 'üìù –ó–∞–º–µ—Ç–∫–∏')
async def start_note(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–¢—ã –≤ –º–µ–Ω—é –∑–∞–º–µ—Ç–æ–∫. –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.',
                         reply_markup=main_note_kb())    
    

@add_note_router.message(F.text == 'üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É')
async def category_views_noti(message: Message, state: FSMContext):
    await state.clear()
    all_category = await get_all_categories(user_id=message.from_user.id)
    await message.answer('‚≠êÔ∏è –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ø–æ–º–æ—â—å—é –º–µ–Ω—é', reply_markup=main_category_kb())    
    if all_category:
        await message.answer('–∏–ª–∏ –≤—ã–±–µ—Ä–µ—Ç–µ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö:',
                             reply_markup=generate_category_keyboard(all_category))
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –î–æ–±–∞–≤—å—Ç–µ –µ–µüëá!', reply_markup=main_category_kb())        


@add_note_router.callback_query(F.data.startswith('category_id_'))
async def start_add_note(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.replace('category_id_', ''))
    await state.update_data(category_id=category_id)
    category = await get_category_by_id(category_id)
    category_name= category['category_name']    
    await call.message.answer(
        f'–î–æ–±–∞–≤—å—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category_name}"',
        reply_markup=stop_fsm()
    )
    await state.set_state(AddNoteStates.content)


@add_note_router.message(AddNoteStates.content)
async def handle_user_note_message(message: Message, state: FSMContext):   
    data = await state.get_data()
    cat_id = data.get('category_id')
    category = await get_category_by_id(cat_id)    
    content_info = get_content_info(message)    
    if content_info.get('content_type'):
        await state.update_data(**content_info)

        text = (f"–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ üìö\n\n"                
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è ‚≠êÔ∏è <u>{category['category_name']}</u>\n"
                "–¢–µ–∫—Å—Ç:\n"
                f"<b>{content_info['content_text'] if content_info['content_text'] else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</b>\n\n"                
                f"–í—Å–µ –ª–∏ –≤–µ—Ä–Ω–æüí°")
        await send_message_user(bot=bot, content_type=content_info['content_type'], content_text=text,
                                user_id=message.from_user.id, file_id=content_info['file_id'],
                                kb=add_note_check())
        await state.set_state(AddNoteStates.check_state)
    else:
        await message.answer(
            '–Ø –Ω–µ –∑–Ω–∞—é –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–∞–∫–∏–º –º–µ–¥–∞—Ñ–∞–π–ª–æ–º. –ù—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ.'
        )
        await state.set_state(AddNoteStates.content)
        

@add_note_router.message(AddNoteStates.check_state, F.text == "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ")
async def confirm_add_note(message: Message, state: FSMContext):
    note = await state.get_data()
    cat_id = int(note.get('category_id'))    
    await add_note(user_id=message.from_user.id, caregory_id=cat_id, content_type=note.get('content_type'),
                   content_text=note.get('content_text'), file_id=note.get('file_id'))
    await message.answer('–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', reply_markup=main_note_kb())
    await state.clear()


@add_note_router.message(AddNoteStates.check_state, F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_add_note(message: Message, state: FSMContext):
    await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=main_note_kb())
    await state.clear()    