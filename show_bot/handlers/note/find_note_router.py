from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from create_bot import bot
from data_base.dao import get_all_categories, get_notes_by_user, find_notes_by_category_name
from keyboards.note_kb import generate_category_keyboard, generate_find_category_keyboard, main_note_kb, find_note_kb
from utils_bot.utils import send_many_notes


find_note_router = Router()

class FindNoteStates(StatesGroup):
    text = State()
    category = State()



@find_note_router.message(F.text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—Ç–æ–∫")
async def start_views_noti(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–í—ã–±–µ—Ä–∏ –∫–∞–∫–∏–µ –∑–∞–º–µ—Ç–∫–∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å', reply_markup=find_note_kb())  


@find_note_router.message(F.text == "üìã –í—Å–µ –∑–∞–º–µ—Ç–∫–∏")
async def all_views_noti(message: Message, state: FSMContext):
    await state.clear()
    all_notes = await get_notes_by_user(user_id=message.from_user.id)
    if all_notes:
        await send_many_notes(all_notes, bot, message.from_user.id)
        await message.answer(f'–í—Å–µ–≥–æ {len(all_notes)} –∑–∞–º–µ—Ç–æ–∫', reply_markup=main_note_kb())
    else:
        await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏!', reply_markup=main_note_kb())


@find_note_router.message(F.text == "üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É")
async def text_views_noti(message: Message, state: FSMContext):
    await state.clear()
    all_notes = await get_notes_by_user(user_id=message.from_user.id)
    if all_notes:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å.')
        await state.set_state(FindNoteStates.text)
    else:
        await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏!', reply_markup=main_note_kb())


@find_note_router.message(F.text, FindNoteStates.text)
async def text_noti_process(message: Message, state: FSMContext):
    text_search = message.text.strip()
    all_notes = await get_notes_by_user(user_id=message.from_user.id, text_search=text_search)
    await state.clear()
    if all_notes:
        await send_many_notes(all_notes, bot, message.from_user.id)
        await message.answer(f'C –ø–æ–∏—Å–∫–æ–≤–æ–π —Ñ—Ä–∞–∑–æ–π {text_search} –±—ã–ª–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(all_notes)} –∑–∞–º–µ—Ç–æ–∫!',
                             reply_markup=main_note_kb())
    else:
        await message.answer(f'–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∞–ª–∞ –±—ã –≤ —Ç–µ–∫—Å—Ç–µ {text_search}!',
                             reply_markup=main_note_kb())
        
        
@find_note_router.message(F.text == "üìù –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def category_views_noti(message: Message, state: FSMContext):
    await state.clear()
    all_category = await get_all_categories()
    if all_category:
        await message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
                             reply_markup=generate_find_category_keyboard(all_category))        
    else:
        await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!', reply_markup=main_note_kb())


@find_note_router.callback_query(F.data.startswith('category_name_'))
async def category_noti_process(call: CallbackQuery, state: FSMContext):    
    await state.clear()
    text_name = call.data.replace('category_name_', '')
    print(text_name)
    all_notes = await find_notes_by_category_name(category_name=text_name)
    if all_notes:
        await send_many_notes(all_notes, bot, call.from_user.id)
        await call.message.answer(f'–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{text_name}" –±—ã–ª–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫: {len(all_notes)}',
                             reply_markup=main_note_kb())
    else:
        await call.answer(f'–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {text_name}!',
                                reply_markup=main_note_kb())